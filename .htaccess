# Cache Optimization for Performance
# Based on PageSpeed Insights recommendations

# Enable caching for static assets
<IfModule mod_expires.c>
    ExpiresActive On

    # Images - cache for 1 year
    ExpiresByType image/jpeg "access plus 1 year"
    ExpiresByType image/png "access plus 1 year"
    ExpiresByType image/gif "access plus 1 year"
    ExpiresByType image/webp "access plus 1 year"
    ExpiresByType image/svg+xml "access plus 1 year"
    ExpiresByType image/x-icon "access plus 1 year"

    # CSS and JavaScript - cache for 1 year
    ExpiresByType text/css "access plus 1 year"
    ExpiresByType application/javascript "access plus 1 year"
    ExpiresByType application/x-javascript "access plus 1 year"
    ExpiresByType text/javascript "access plus 1 year"

    # Fonts - cache for 1 year
    ExpiresByType font/woff "access plus 1 year"
    ExpiresByType font/woff2 "access plus 1 year"
    ExpiresByType application/font-woff "access plus 1 year"
    ExpiresByType application/font-woff2 "access plus 1 year"
    ExpiresByType application/x-font-ttf "access plus 1 year"
    ExpiresByType font/ttf "access plus 1 year"
    ExpiresByType font/eot "access plus 1 year"
    ExpiresByType font/opentype "access plus 1 year"

    # HTML documents - cache for 1 day (allows updates)
    ExpiresByType text/html "access plus 1 day"
    ExpiresByType application/xhtml+xml "access plus 1 day"

    # Other assets
    ExpiresByType application/pdf "access plus 1 year"
    ExpiresByType application/x-shockwave-flash "access plus 1 year"
    ExpiresByType audio/mpeg "access plus 1 year"
    ExpiresByType audio/wav "access plus 1 year"
    ExpiresByType video/mp4 "access plus 1 year"

    # Fallback for files without MIME type
    <FilesMatch "\.(jpg|jpeg|png|gif|webp|svg|ico|css|js|woff|woff2|ttf|eot)$">
        ExpiresDefault "access plus 1 year"
    </FilesMatch>
</IfModule>

# Cache-Control headers for better caching
<IfModule mod_headers.c>
    # Images - long cache with public
    <FilesMatch "\.(jpg|jpeg|png|gif|webp|svg|ico)$">
        Header set Cache-Control "public, max-age=31536000, immutable"
    </FilesMatch>

    # CSS and JavaScript - long cache with immutable (since we use versioning)
    <FilesMatch "\.(css|js)$">
        Header set Cache-Control "public, max-age=31536000, immutable"
    </FilesMatch>

    # Fonts - long cache with public
    <FilesMatch "\.(woff|woff2|ttf|eot|otf)$">
        Header set Cache-Control "public, max-age=31536000, immutable"
    </FilesMatch>

    # HTML - shorter cache to allow updates
    <FilesMatch "\.(html|htm)$">
        Header set Cache-Control "public, max-age=86400"
    </FilesMatch>

    # Compressed files
    <FilesMatch "\.(css|js|html|htm)$">
        Header append Vary Accept-Encoding
    </FilesMatch>

    # Comprehensive Security Headers with Enhanced Frame Control
    Header set X-Content-Type-Options "nosniff"
    Header set X-Frame-Options "SAMEORIGIN"
    Header set X-XSS-Protection "1; mode=block"
    Header set Referrer-Policy "strict-origin-when-cross-origin"
    Header set Permissions-Policy "geolocation=(), microphone=(), camera=(), payment=(), usb=(), magnetometer=(), gyroscope=(), accelerometer=()"

    # Enhanced Frame Control Headers for Clickjacking Prevention
    # X-Frame-Options (legacy but still important)
    Header always set X-Frame-Options "SAMEORIGIN"

    # Content Security Policy with Trusted Types for DOM XSS protection
    Header always set Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval' https://www.googletagmanager.com https://pagead2.googlesyndication.com https://googleads.g.doubleclick.net https://tpc.googlesyndication.com https://www.google-analytics.com; style-src 'self' 'unsafe-inline' https://fonts.googleapis.com https://fonts.gstatic.com; font-src 'self' https://fonts.gstatic.com data:; img-src 'self' data: https: https://images.noimnothuman.xyz https://www.google-analytics.com https://pagead2.googlesyndication.com https://tpc.googlesyndication.com; connect-src 'self' https://www.google-analytics.com https://api.noimnothuman.xyz https://www.googletagmanager.com; frame-src 'self' https://www.google.com https://tpc.googlesyndication.com; media-src 'self'; object-src 'none'; base-uri 'self'; form-action 'self'; frame-ancestors 'self'; manifest-src 'self'; worker-src 'self'; require-trusted-types-for 'script'; report-uri https://noimnothuman.xyz/csp-report"

    # Additional Clickjacking Protection Headers
    Header set X-Permitted-Cross-Domain-Policies "none"
    Header set Content-Security-Policy-Report-Only "default-src 'self'; frame-ancestors 'self'; require-trusted-types-for 'script'"

    # HTTP Strict Transport Security (HSTS) - Anti-connection-downgrade protection
    # Phase 1: Conservative approach (recommended for initial deployment)
    # Header always set Strict-Transport-Security "max-age=31536000; includeSubDomains; preload"  # Uncomment when fully tested

    # Phase 2: Gradual deployment approach (current)
    # Start with shorter max-age for testing, then increase to 1 year
    Header always set Strict-Transport-Security "max-age=2592000; includeSubDomains"
    # max-age=2592000 = 30 days (phase 1 deployment)
    # Next phase: max-age=31536000 = 1 year
    # Final phase: Add preload for HSTS preload list inclusion

    # Additional HTTPS Security Headers
    Header set Expect-CT "max-age=86400, enforce"
    # Note: HPKP (Public Key Pinning) is deprecated and not recommended

    # Cross-Origin Security Headers for Isolation
    # Cross-Origin-Opener-Policy (COOP) - Prevents cross-origin attacks
    Header set Cross-Origin-Opener-Policy "same-origin"

    # Cross-Origin-Embedder-Policy (COEP) - Enables cross-origin isolation
    Header set Cross-Origin-Embedder-Policy "require-corp"

    # Cross-Origin-Resource-Policy (CORP) - Protects resources from cross-origin usage
    <FilesMatch "\.(js|css|png|jpg|jpeg|gif|webp|svg|woff|woff2|ttf|eot)$">
        Header set Cross-Origin-Resource-Policy "same-origin"
    </FilesMatch>

    # Content Security Policy (CSP) - Already defined above with frame-ancestors
</IfModule>

# Gzip compression
<IfModule mod_deflate.c>
    # Compress HTML, CSS, JavaScript, Text, XML and fonts
    AddOutputFilterByType DEFLATE application/xhtml+xml
    AddOutputFilterByType DEFLATE application/xml
    AddOutputFilterByType DEFLATE text/html
    AddOutputFilterByType DEFLATE text/css
    AddOutputFilterByType DEFLATE application/javascript
    AddOutputFilterByType DEFLATE application/x-javascript
    AddOutputFilterByType DEFLATE text/javascript
    AddOutputFilterByType DEFLATE text/plain
    AddOutputFilterByType DEFLATE text/xml
    AddOutputFilterByType DEFLATE image/svg+xml
    AddOutputFilterByType DEFLATE application/rss+xml
    AddOutputFilterByType DEFLATE application/json
    AddOutputFilterByType DEFLATE font/woff
    AddOutputFilterByType DEFLATE font/woff2
    AddOutputFilterByType DEFLATE font/ttf
    AddOutputFilterByType DEFLATE font/eot
    AddOutputFilterByType DEFLATE font/opentype

    # Remove browser bugs (only needed for really old browsers)
    BrowserMatch ^Mozilla/4 gzip-only-text/html
    BrowserMatch ^Mozilla/4\.0[678] no-gzip
    BrowserMatch \bMSIE !no-gzip !gzip-only-text/html
    Header append Vary User-Agent
</IfModule>

# Brotli compression (if available)
<IfModule mod_brotli.c>
    AddOutputFilterByType BROTLI application/javascript
    AddOutputFilterByType BROTLI application/json
    AddOutputFilterByType BROTLI application/xhtml+xml
    AddOutputFilterByType BROTLI application/xml
    AddOutputFilterByType BROTLI text/css
    AddOutputFilterByType BROTLI text/html
    AddOutputFilterByType BROTLI text/javascript
    AddOutputFilterByType BROTLI text/plain
    AddOutputFilterByType BROTLI text/xml
    AddOutputFilterByType BROTLI image/svg+xml
    AddOutputFilterByType BROTLI font/woff
    AddOutputFilterByType BROTLI font/woff2
    AddOutputFilterByType BROTLI font/ttf
    AddOutputFilterByType BROTLI font/eot
    AddOutputFilterByType BROTLI font/opentype
</IfModule>

# Security and performance improvements
<IfModule mod_rewrite.c>
    RewriteEngine On

    # Force HTTPS (enabled for HSTS compliance)
    RewriteCond %{HTTPS} off
    RewriteRule ^(.*)$ https://%{HTTP_HOST}%{REQUEST_URI} [L,R=301]

    # Force HTTPS for www subdomain (canonicalization)
    RewriteCond %{HTTP_HOST} ^www\.(.*)$ [NC]
    RewriteCond %{HTTPS} on
    RewriteRule ^(.*)$ https://%1/$1 [R=301,L]

    # Remove trailing slashes
    RewriteCond %{REQUEST_FILENAME} !-d
    RewriteCond %{REQUEST_URI} (.+)/$
    RewriteRule ^ %1 [L,R=301]

    # Redirect index.html to root
    RewriteCond %{THE_REQUEST} ^[A-Z]{3,9}\ /.*index\.html\ HTTP/
    RewriteRule ^(.*)index\.html$ /$1 [L,R=301]
</IfModule>

# Protect sensitive files
<FilesMatch "^\.">
    Order allow,deny
    Deny from all
</FilesMatch>

<FilesMatch "^(README|LICENSE|CHANGELOG|composer)\.(md|txt)$">
    Order allow,deny
    Deny from all
</FilesMatch>

# Server signature
ServerSignature Off

# CSP Report Endpoint (Optional - for monitoring CSP violations)
# This endpoint would receive JSON reports about CSP violations
# Uncomment and create csp-report.php if you want to monitor violations
# <Files "csp-report.php">
#     Header set Content-Type "application/json"
# </Files>